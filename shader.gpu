

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;
varying vec3 n, v;

void main() {
    n=mat3(NormalMatrix)*normal;
    v=mat3(ModelViewProjectionMatrix)*vertex;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 n, v;
uniform vec4 color;
void main() {
    vec3 vertPos = v;
    vec3 lightPos = vec3(1.0);
    vec3 N = normalize(n);
    vec3 L = normalize(lightPos - vertPos);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);
        vec3 V = normalize(-vertPos);
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 80.0);
    }
    vec3 ambientColor = color.xyz*0.1;
    vec3 specularColor = vec3(1.0);
    gl_FragColor = color;
    gl_FragColor = vec4(v,1.0);
    gl_FragColor = vec4(ambientColor +lambertian * color.xyz +specular * specularColor, 1.0);
}`;